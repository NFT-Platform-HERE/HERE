pipeline {
    agent any
    environment {
        DOCKER = 'sudo docker'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('env setting') {
            parallel {
                stage('insert-keystore-auth') {
                    when {
                        anyOf {
                            changeset "here-back/here-auth/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/develop-BE-pipeline/here-back/here-auth/src/main/resource'
                    }
                    echo 'Insert keystore...'
                }

                stage('insert-keystore-board') {
                    when {
                        anyOf {
                            changeset "here-back/here-board/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/develop-BE-pipeline/here-back/here-board/src/main/resource'
                    }
                    echo 'Insert keystore...'
                }

                stage('insert-keystore-nft') {
                    when {
                        anyOf {
                            changeset "here-back/here-nft/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/develop-BE-pipeline/here-back/here-nft/src/main/resource'
                    }
                    echo 'Insert keystore...'
                }

                stage('insert-keystore-notification') {
                    when {
                        anyOf {
                            changeset "here-back/here-notification/**/*"
                        }
                    }
                    steps {
                        sh 'cp /var/jenkins_home/env/keystore.p12 /var/jenkins_home/workspace/develop-BE-pipeline/here-back/here-notification/src/main/resource'
                    }
                    echo 'Insert keystore...'
                }
            }            
        }

        stage('Build image') {
            parallel {
                stage('build-here-auth') {
                    when {
                        anyOf {
                            changeset "here-back/here-auth/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('here-back/here-auth'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${HERE_AUTH_IMAGE} .'
                        }
                        echo 'Build image...'
                    }
                }
                stage('build-here-board') {
                    when {
                        anyOf {
                            changeset "here-back/here-board/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('here-back/here-board'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${HERE_BOARD_IMAGE} .'
                        }
                        echo 'Build image...'
                    }
                }
                stage('build-here-nft') {
                    when {
                        anyOf {
                            changeset "here-back/here-nft/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('here-back/here-nft'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${HERE_NFT_IMAGE} .'
                        }
                        echo 'Build image...'
                    }
                }
                stage('build-here-notification') {
                    when {
                        anyOf {
                            changeset "here-back/here-notification/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('here-back/here-notification'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t ${HERE_NOTIFICATION_IMAGE} .'
                        }
                        echo 'Build image...'
                    }
                }
            }
        }

        stage('Remove Previous image') {
            parallel {
                stage('remove-here-auth') {
                    when {
                        anyOf {
                            changeset "here-back/here-auth/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop ${HERE_AUTH_CONTAINER}'
                                sh 'docker rm ${HERE_AUTH_CONTAINER}'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
                stage('remove-here-board') {
                    when {
                        anyOf {
                            changeset "here-back/here-board/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop ${HERE_BOARD_CONTAINER}'
                                sh 'docker rm ${HERE_BOARD_CONTAINER}'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
                stage('remove-here-nft') {
                    when {
                        anyOf {
                            changeset "here-back/here-nft/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop ${HERE_NFT_CONTAINER}'
                                sh 'docker rm ${HERE_NFT_CONTAINER}'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
                stage('remove-here-notification') {
                    when {
                        anyOf {
                            changeset "here-back/here-notification/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop ${HERE_NOTIFICATION_CONTAINER}'
                                sh 'docker rm ${HERE_NOTIFICATION_CONTAINER}'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
            }
        }
        stage('Run New image') {
            parallel {
                stage('run-here-auth') {
                    when {
                        anyOf {
                            changeset "here-back/here-auth/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name ${HERE_AUTH_CONTAINER} -e KEY_STORE=${KEY_STORE} -e KEY_STORE_PASSWORD=${KEY_STORE_PASSWORD} -e KEY_STORE_TYPE=${KEY_STORE_TYPE} -e DB_URL=${DB_URL} -e DB_USERNAME=${DB_USERNAME} -e DB_PASSWORD=${DB_PASSWORD} -e MM_WEBHOOK_URL=${MM_WEBHOOK_URL} -d -p 9010:9010 ${HERE_AUTH_IMAGE}'
                        echo 'Run New image'
                    }
                }
                stage('run-here-board') {
                    when {
                        anyOf {
                            changeset "here-back/here-board/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name ${HERE_BOARD_CONTAINER} -e KEY_STORE=${KEY_STORE} -e KEY_STORE_PASSWORD=${KEY_STORE_PASSWORD} -e KEY_STORE_TYPE=${KEY_STORE_TYPE} -e DB_URL=${DB_URL} -e DB_USERNAME=${DB_USERNAME} -e DB_PASSWORD=${DB_PASSWORD} -e MM_WEBHOOK_URL=${MM_WEBHOOK_URL} -e S3_ACCESS_KEY=${S3_ACCESS_KEY} -e S3_SECRET_KEY=${S3_SECRET_KEY} -e S3_BUCKET=${S3_BUCKET} -d -p 9011:9011 ${HERE_BOARD_IMAGE}'
                        echo 'Run New image'
                    }
                }
                stage('run-here-nft') {
                    when {
                        anyOf {
                            changeset "here-back/here-nft/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name ${HERE_NFT_CONTAINER} -e KEY_STORE=${KEY_STORE} -e KEY_STORE_PASSWORD=${KEY_STORE_PASSWORD} -e KEY_STORE_TYPE=${KEY_STORE_TYPE} -e DB_URL=${DB_URL} -e DB_USERNAME=${DB_USERNAME} -e DB_PASSWORD=${DB_PASSWORD} -e MM_WEBHOOK_URL=${MM_WEBHOOK_URL} -e TZ=Asia/Seoul -d -p 9012:9012 ${HERE_NFT_IMAGE}'
                        echo 'Run New image'
                    }
                }
                stage('run-here-notification') {
                    when {
                        anyOf {
                            changeset "here-back/here-nft/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name ${HERE_NOTIFICATION_CONTAINER} -e KEY_STORE=${KEY_STORE} -e KEY_STORE_PASSWORD=${KEY_STORE_PASSWORD} -e KEY_STORE_TYPE=${KEY_STORE_TYPE} -e DB_URL=${DB_URL} -e DB_USERNAME=${DB_USERNAME} -e DB_PASSWORD=${DB_PASSWORD} -e MM_WEBHOOK_URL=${MM_WEBHOOK_URL} -e TZ=Asia/Seoul -d -p 9012:9012 ${HERE_NOTIFICATION_IMAGE}'
                        echo 'Run New image'
                    }
                }
            }
        }
    }
}
